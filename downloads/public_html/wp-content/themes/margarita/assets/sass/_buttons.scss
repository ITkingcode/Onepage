
/* --- General Button --- */

.button {
  background: none;
  border: 2px solid;
  font: inherit;
  font-size:16px;
  line-height: 1;
  margin: 0.5em;
  padding: 1em 2em;
}

.white,
.white:hover
.white:focus {
  color:#000 !important;
}

.black:hover {
  opacity:1;
  color:#fff !important;
}



// Animate the size, outside
.pulse:hover, 
.pulse:focus {
  animation: pulse 1s;
  box-shadow: 0 0 0 0.8em rgba(#fff,0);
}

.pulse2:hover, 
.pulse2:focus {
  animation: pulse2 1s;
  box-shadow: 0 0 0 0.8em rgba(#000,0);
}

@keyframes pulse {
  0% { box-shadow: 0 0 0 0 var(--hover); }
}
@keyframes pulse2 {
  0% { box-shadow: 0 0 0 0 var(--hover); }
}


// Basic button styles
button {
  background: none;
  border: 2px solid;
  font: inherit;
  line-height: 1;
  margin: 0.5em;
  padding: 1em 2em;
}



//=== Set button colors
// If you wonder why use Sass vars or CSS custom properties...
  // Make a map with the class names and matching colors
$colors: (
  fill: #a972cb,
  pulse: #fff, 
  pulse2: #000, 
  close: #ff7f82, 
  raise: #ffa260, 
  up: #e4cb58, 
  slide: #8fc866, 
  offset: #19bc8b
);



// Sass variables compile to a static string; CSS variables are dynamic and inherited
  // Loop through the map and set CSS custom properties using Sass variables
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    --hover: #{adjust-hue($color, 45deg)};
  }
}

// Now every button will have different colors as set above.
   // We get to use the same structure, only changing the custom properties.
button {  
  color: var(--color);
  transition: 0.25s;
  
  &:hover,
  &:focus { 
    border-color: var(--hover);
    color: #fff;
  }
}



.button {  
  color: var(--color);
  transition: 0.25s;
  
  &:hover,
  &:focus { 
    border-color: var(--hover);
    color: #fff;
  }
}
